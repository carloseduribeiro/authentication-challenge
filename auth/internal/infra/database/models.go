// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuthUserType string

const (
	AuthUserTypeDefault AuthUserType = "default"
	AuthUserTypeAdmin   AuthUserType = "admin"
)

func (e *AuthUserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthUserType(s)
	case string:
		*e = AuthUserType(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthUserType: %T", src)
	}
	return nil
}

type NullAuthUserType struct {
	AuthUserType AuthUserType
	Valid        bool // Valid is true if AuthUserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthUserType) Scan(value interface{}) error {
	if value == nil {
		ns.AuthUserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthUserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthUserType), nil
}

type AuthUser struct {
	ID        uuid.UUID
	Document  string
	Name      string
	Email     string
	Password  string
	Birthdate time.Time
	Type      AuthUserType
}
