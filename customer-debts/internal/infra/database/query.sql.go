// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getDebtsByDocument = `-- name: GetDebtsByDocument :many
SELECT id, document, duedate, amount, created_at
FROM customer.debts
WHERE document = $1
`

func (q *Queries) GetDebtsByDocument(ctx context.Context, document string) ([]CustomerDebt, error) {
	rows, err := q.db.Query(ctx, getDebtsByDocument, document)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerDebt
	for rows.Next() {
		var i CustomerDebt
		if err := rows.Scan(
			&i.ID,
			&i.Document,
			&i.Duedate,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDebt = `-- name: InsertDebt :exec
INSERT INTO customer.debts (id, document, dueDate, amount, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type InsertDebtParams struct {
	ID        uuid.UUID
	Document  string
	Duedate   time.Time
	Amount    float64
	CreatedAt time.Time
}

func (q *Queries) InsertDebt(ctx context.Context, arg InsertDebtParams) error {
	_, err := q.db.Exec(ctx, insertDebt,
		arg.ID,
		arg.Document,
		arg.Duedate,
		arg.Amount,
		arg.CreatedAt,
	)
	return err
}
